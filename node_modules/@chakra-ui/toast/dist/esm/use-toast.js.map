{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","getToastPlacement","Toast","props","status","variant","id","title","isClosable","onClose","description","alertTitleId","undefined","defaults","duration","position","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","renderWithProviders","options","render","toastImpl","opts","direction","Message","notify","close","closeAll","update","message","isActive","useToast","useMemo"],"mappings":"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","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport {\n  getToastPlacement,\n  ToastPositionWithLogical,\n  WithoutLogicalPosition,\n} from \"./toast.placement\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPositionWithLogical\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: \"subtle\" | \"solid\" | \"left-accent\" | \"top-accent\" | (string & {})\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\ntype UseToastOptionsNormalized = WithoutLogicalPosition<UseToastOptions>\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  const alertTitleId = typeof id !== \"undefined\" ? `toast-${id}-title` : undefined\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n      aria-labelledby={alertTitleId}\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\" maxWidth=\"100%\">\n        {title && <AlertTitle id={alertTitleId}>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  ReturnType<typeof useChakra> & {\n    setColorMode: (value: ColorMode) => void\n    defaultOptions: UseToastOptions\n  }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptionsNormalized,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options,\n    })\n  }, [theme, setColorMode, toggleColorMode, colorMode, options])\n}\n\nexport default useToast\n"],"file":"use-toast.js"}