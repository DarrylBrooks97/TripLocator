{"version":3,"sources":["../../src/range-slider.tsx"],"names":["name","errorMessage","RangeSliderProvider","useRangeSliderContext","RangeSlider","props","ref","styles","ownProps","direction","getRootProps","context","ctx","React","useMemo","container","children","defaultProps","orientation","__DEV__","displayName","RangeSliderThumb","getThumbProps","getInputProps","thumbProps","className","thumb","index","RangeSliderTrack","getTrackProps","trackProps","track","RangeSliderFilledTrack","getInnerTrackProps","filledTrack","RangeSliderMark","getMarkerProps","markProps"],"mappings":";;;;;AAAA;;AACA;;AAWA;;AACA;;AACA;;;;;;;;;;qBAcI,+BAAkC;AACpCA,EAAAA,IAAI,EAAE,eAD8B;AAEpCC,EAAAA,YAAY,EACV;AAHkC,CAAlC,C;IAFFC,mB;IACAC,qB;;;;;AAcF;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,WAAW,gBAAG,wBAAoC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC7E,MAAMC,MAAM,GAAG,iCAAoB,QAApB,EAA8BF,KAA9B,CAAf;AACA,MAAMG,QAAQ,GAAG,8BAAiBH,KAAjB,CAAjB;;AAF6E,kBAGvD,uBAHuD;AAAA,MAGrEI,SAHqE,aAGrEA,SAHqE;;AAI7ED,EAAAA,QAAQ,CAACC,SAAT,GAAqBA,SAArB;;AAJ6E,wBAMxC,qCAAeD,QAAf,CANwC;AAAA,MAMrEE,YANqE,mBAMrEA,YANqE;AAAA,MAMpDC,OANoD;;AAO7E,MAAMC,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAc;AAAA,wBAAYH,OAAZ;AAAqBX,MAAAA,IAAI,EAAEK,KAAK,CAACL;AAAjC;AAAA,GAAd,EAAwD,CAClEW,OADkE,EAElEN,KAAK,CAACL,IAF4D,CAAxD,CAAZ;AAKA,sBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEY;AAA5B,kBACE,oBAAC,sBAAD;AAAgB,IAAA,KAAK,EAAEL;AAAvB,kBACE,oBAAC,cAAD,CAAQ,GAAR,eACMG,YAAY,CAAC,EAAD,EAAKJ,GAAL,CADlB;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,KAAK,EAAEC,MAAM,CAACQ;AAHhB,MAKGV,KAAK,CAACW,QALT,CADF,CADF,CADF;AAaD,CAzB0B,CAApB;;AA2BPZ,WAAW,CAACa,YAAZ,GAA2B;AACzBC,EAAAA,WAAW,EAAE;AADY,CAA3B;;AAIA,IAAIC,cAAJ,EAAa;AACXf,EAAAA,WAAW,CAACgB,WAAZ,GAA0B,aAA1B;AACD;;AAMD;AACA;AACA;AACA;AACO,IAAMC,gBAAgB,gBAAG,wBAC9B,UAAChB,KAAD,EAAQC,GAAR,EAAgB;AAAA,8BACiCH,qBAAqB,EADtD;AAAA,MACNmB,aADM,yBACNA,aADM;AAAA,MACSC,aADT,yBACSA,aADT;AAAA,MACwBvB,IADxB,yBACwBA,IADxB;;AAEd,MAAMO,MAAM,GAAG,wBAAf;AACA,MAAMiB,UAAU,GAAGF,aAAa,CAACjB,KAAD,EAAQC,GAAR,CAAhC;AAEA,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACMkB,UADN;AAEE,IAAA,SAAS,EAAE,eAAG,sBAAH,EAA2BnB,KAAK,CAACoB,SAAjC,CAFb;AAGE,IAAA,KAAK,EAAElB,MAAM,CAACmB;AAHhB,MAKGF,UAAU,CAACR,QALd,EAMGhB,IAAI,iBAAI,6BAAWuB,aAAa,CAAC;AAAEI,IAAAA,KAAK,EAAEtB,KAAK,CAACsB;AAAf,GAAD,CAAxB,CANX,CADF;AAUD,CAhB6B,CAAzB;;;AAmBP,IAAIR,cAAJ,EAAa;AACXE,EAAAA,gBAAgB,CAACD,WAAjB,GAA+B,kBAA/B;AACD;;AAIM,IAAMQ,gBAAgB,gBAAG,wBAC9B,UAACvB,KAAD,EAAQC,GAAR,EAAgB;AAAA,+BACYH,qBAAqB,EADjC;AAAA,MACN0B,aADM,0BACNA,aADM;;AAEd,MAAMtB,MAAM,GAAG,wBAAf;AACA,MAAMuB,UAAU,GAAGD,aAAa,CAACxB,KAAD,EAAQC,GAAR,CAAhC;AAEA,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACMwB,UADN;AAEE,IAAA,SAAS,EAAE,eAAG,sBAAH,EAA2BzB,KAAK,CAACoB,SAAjC,CAFb;AAGE,IAAA,KAAK,EAAElB,MAAM,CAACwB;AAHhB,KADF;AAOD,CAb6B,CAAzB;;;AAgBP,IAAIZ,cAAJ,EAAa;AACXS,EAAAA,gBAAgB,CAACR,WAAjB,GAA+B,kBAA/B;AACD;;AAIM,IAAMY,sBAAsB,gBAAG,wBAGpC,UAAC3B,KAAD,EAAQC,GAAR,EAAgB;AAAA,+BACeH,qBAAqB,EADpC;AAAA,MACR8B,kBADQ,0BACRA,kBADQ;;AAEhB,MAAM1B,MAAM,GAAG,wBAAf;AACA,MAAMuB,UAAU,GAAGG,kBAAkB,CAAC5B,KAAD,EAAQC,GAAR,CAArC;AAEA,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACMwB,UADN;AAEE,IAAA,SAAS,EAAC,6BAFZ;AAGE,IAAA,KAAK,EAAEvB,MAAM,CAAC2B;AAHhB,KADF;AAOD,CAfqC,CAA/B;;;AAiBP,IAAIf,cAAJ,EAAa;AACXa,EAAAA,sBAAsB,CAACZ,WAAvB,GAAqC,wBAArC;AACD;;AAMD;AACA;AACA;AACA;AACA;AACA;AACO,IAAMe,eAAe,gBAAG,wBAC7B,UAAC9B,KAAD,EAAQC,GAAR,EAAgB;AAAA,+BACaH,qBAAqB,EADlC;AAAA,MACNiC,cADM,0BACNA,cADM;;AAEd,MAAMC,SAAS,GAAGD,cAAc,CAAC/B,KAAD,EAAQC,GAAR,CAAhC;AACA,sBACE,oBAAC,cAAD,CAAQ,GAAR,eACM+B,SADN;AAEE,IAAA,SAAS,EAAE,eAAG,uBAAH,EAA4BhC,KAAK,CAACoB,SAAlC;AAFb,KADF;AAMD,CAV4B,CAAxB;;;AAaP,IAAIN,cAAJ,EAAa;AACXgB,EAAAA,eAAe,CAACf,WAAhB,GAA8B,iBAA9B;AACD","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRangeSlider,\n  UseRangeSliderProps,\n  UseRangeSliderReturn,\n} from \"./use-range-slider\"\n\ninterface RangeSliderContext\n  extends Omit<UseRangeSliderReturn, \"getRootProps\"> {\n  name?: string | string[]\n}\n\nconst [\n  RangeSliderProvider,\n  useRangeSliderContext,\n] = createContext<RangeSliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\",\n})\n\nexport { RangeSliderProvider, useRangeSliderContext }\n\nexport interface RangeSliderProps\n  extends UseRangeSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseRangeSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const RangeSlider = forwardRef<RangeSliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getRootProps, ...context } = useRangeSlider(ownProps)\n  const ctx = React.useMemo(() => ({ ...context, name: props.name }), [\n    context,\n    props.name,\n  ])\n\n  return (\n    <RangeSliderProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className=\"chakra-slider\"\n          __css={styles.container}\n        >\n          {props.children}\n        </chakra.div>\n      </StylesProvider>\n    </RangeSliderProvider>\n  )\n})\n\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\"\n}\n\nexport interface RangeSliderThumbProps extends HTMLChakraProps<\"div\"> {\n  index: number\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const RangeSliderThumb = forwardRef<RangeSliderThumbProps, \"div\">(\n  (props, ref) => {\n    const { getThumbProps, getInputProps, name } = useRangeSliderContext()\n    const styles = useStyles()\n    const thumbProps = getThumbProps(props, ref)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={styles.thumb}\n      >\n        {thumbProps.children}\n        {name && <input {...getInputProps({ index: props.index })} />}\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\"\n}\n\nexport interface RangeSliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderTrack = forwardRef<RangeSliderTrackProps, \"div\">(\n  (props, ref) => {\n    const { getTrackProps } = useRangeSliderContext()\n    const styles = useStyles()\n    const trackProps = getTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={styles.track}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\"\n}\n\nexport interface RangeSliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderFilledTrack = forwardRef<\n  RangeSliderInnerTrackProps,\n  \"div\"\n>((props, ref) => {\n  const { getInnerTrackProps } = useRangeSliderContext()\n  const styles = useStyles()\n  const trackProps = getInnerTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={styles.filledTrack}\n    />\n  )\n})\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\"\n}\n\nexport interface RangeSliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const RangeSliderMark = forwardRef<RangeSliderMarkProps, \"div\">(\n  (props, ref) => {\n    const { getMarkerProps } = useRangeSliderContext()\n    const markProps = getMarkerProps(props, ref)\n    return (\n      <chakra.div\n        {...markProps}\n        className={cx(\"chakra-slider__marker\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\"\n}\n"],"file":"range-slider.js"}