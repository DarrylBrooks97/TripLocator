{"version":3,"sources":["../../src/range-slider.tsx"],"names":["createContext","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","useTheme","cx","__DEV__","React","useRangeSlider","RangeSliderProvider","useRangeSliderContext","name","errorMessage","RangeSlider","props","ref","styles","ownProps","direction","getRootProps","context","ctx","useMemo","container","children","defaultProps","orientation","displayName","RangeSliderThumb","getThumbProps","getInputProps","thumbProps","className","thumb","index","RangeSliderTrack","getTrackProps","trackProps","track","RangeSliderFilledTrack","getInnerTrackProps","filledTrack","RangeSliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRangeSlider,\n  UseRangeSliderProps,\n  UseRangeSliderReturn,\n} from \"./use-range-slider\"\n\ninterface RangeSliderContext\n  extends Omit<UseRangeSliderReturn, \"getRootProps\"> {\n  name?: string | string[]\n}\n\nconst [\n  RangeSliderProvider,\n  useRangeSliderContext,\n] = createContext<RangeSliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />\",\n})\n\nexport { RangeSliderProvider, useRangeSliderContext }\n\nexport interface RangeSliderProps\n  extends UseRangeSliderProps,\n    ThemingProps<\"Slider\">,\n    Omit<HTMLChakraProps<\"div\">, keyof UseRangeSliderProps> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const RangeSlider = forwardRef<RangeSliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  ownProps.direction = direction\n\n  const { getRootProps, ...context } = useRangeSlider(ownProps)\n  const ctx = React.useMemo(() => ({ ...context, name: props.name }), [\n    context,\n    props.name,\n  ])\n\n  return (\n    <RangeSliderProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className=\"chakra-slider\"\n          __css={styles.container}\n        >\n          {props.children}\n        </chakra.div>\n      </StylesProvider>\n    </RangeSliderProvider>\n  )\n})\n\nRangeSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  RangeSlider.displayName = \"RangeSlider\"\n}\n\nexport interface RangeSliderThumbProps extends HTMLChakraProps<\"div\"> {\n  index: number\n}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const RangeSliderThumb = forwardRef<RangeSliderThumbProps, \"div\">(\n  (props, ref) => {\n    const { getThumbProps, getInputProps, name } = useRangeSliderContext()\n    const styles = useStyles()\n    const thumbProps = getThumbProps(props, ref)\n\n    return (\n      <chakra.div\n        {...thumbProps}\n        className={cx(\"chakra-slider__thumb\", props.className)}\n        __css={styles.thumb}\n      >\n        {thumbProps.children}\n        {name && <input {...getInputProps({ index: props.index })} />}\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderThumb.displayName = \"RangeSliderThumb\"\n}\n\nexport interface RangeSliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderTrack = forwardRef<RangeSliderTrackProps, \"div\">(\n  (props, ref) => {\n    const { getTrackProps } = useRangeSliderContext()\n    const styles = useStyles()\n    const trackProps = getTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className={cx(\"chakra-slider__track\", props.className)}\n        __css={styles.track}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderTrack.displayName = \"RangeSliderTrack\"\n}\n\nexport interface RangeSliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const RangeSliderFilledTrack = forwardRef<\n  RangeSliderInnerTrackProps,\n  \"div\"\n>((props, ref) => {\n  const { getInnerTrackProps } = useRangeSliderContext()\n  const styles = useStyles()\n  const trackProps = getInnerTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className=\"chakra-slider__filled-track\"\n      __css={styles.filledTrack}\n    />\n  )\n})\n\nif (__DEV__) {\n  RangeSliderFilledTrack.displayName = \"RangeSliderFilledTrack\"\n}\n\nexport interface RangeSliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/slider\n */\nexport const RangeSliderMark = forwardRef<RangeSliderMarkProps, \"div\">(\n  (props, ref) => {\n    const { getMarkerProps } = useRangeSliderContext()\n    const markProps = getMarkerProps(props, ref)\n    return (\n      <chakra.div\n        {...markProps}\n        className={cx(\"chakra-slider__marker\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RangeSliderMark.displayName = \"RangeSliderMark\"\n}\n"],"file":"range-slider.js"}