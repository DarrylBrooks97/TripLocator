{"version":3,"sources":["../../src/pan-event.ts"],"names":["sync","cancelSync","getFrameData","getEventWindow","distance","noop","pipe","addPointerEvent","extractEventInfo","isMouseEvent","isMultiTouchEvent","PanSession","constructor","event","handlers","threshold","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","offset","x","y","timestamp","push","point","onStart","onMove","buttons","onPointerUp","update","updatePoint","panInfo","onEnd","onSessionEnd","end","win","stopPropagation","preventDefault","onSessionStart","removeListeners","onPointerMove","updateHandlers","subtractPoint","a","b","startPanPoint","lastPanPoint","length","delta","velocity","getVelocity","lastDevicePoint","toMilliseconds","seconds","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity"],"mappings":"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","sourcesContent":["/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport sync, { cancelSync, getFrameData } from \"framesync\"\nimport { getEventWindow } from \"./dom\"\nimport { distance, noop, pipe } from \"./function\"\nimport {\n  addPointerEvent,\n  AnyPointerEvent,\n  extractEventInfo,\n  isMouseEvent,\n  isMultiTouchEvent,\n  Point,\n  PointerEventInfo,\n} from \"./pointer-event\"\n\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\nexport interface PanEventInfo {\n  /**\n   * Contains `x` and `y` values for the current pan position relative\n   * to the device or page.\n   */\n  point: Point\n  /**\n   * Contains `x` and `y` values for the distance moved since\n   * the last pan event.\n   */\n  delta: Point\n  /**\n   * Contains `x` and `y` values for the distance moved from\n   * the first pan event.\n   */\n  offset: Point\n  /**\n   * Contains `x` and `y` values for the current velocity of the pointer.\n   */\n  velocity: Point\n}\n\nexport type PanEventHandler = (\n  event: AnyPointerEvent,\n  info: PanEventInfo,\n) => void\n\ninterface TimestampedPoint extends Point {\n  timestamp: number\n}\n\nexport interface PanSessionHandlers {\n  /**\n   * Callback fired when the pan session is created.\n   * This is typically called once `pointerdown` event is fired.\n   */\n  onSessionStart: PanEventHandler\n  /**\n   * Callback fired when the pan session is detached.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onSessionEnd: PanEventHandler\n  /**\n   * Callback fired when the pan session has started.\n   * The pan session when the pan offset is greater than\n   * the threshold (allowable move distance to detect pan)\n   */\n  onStart: PanEventHandler\n  /**\n   * Callback fired while panning\n   */\n  onMove: PanEventHandler\n  /**\n   * Callback fired when the current pan session has end.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onEnd: PanEventHandler\n}\n\ntype PanSessionHistory = TimestampedPoint[]\n\nexport type PanSessionOptions = {\n  threshold?: number\n  window?: Window\n}\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: PanSessionHistory = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanSessionHandlers> = {}\n\n  private removeListeners: Function = noop\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  private win: typeof globalThis\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanSessionHandlers>,\n    threshold?: number,\n  ) {\n    this.win = getEventWindow(event)\n\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = extractEventInfo(event)\n    const { timestamp } = getFrameData()\n    this.history = [{ ...info.point, timestamp }]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    const { timestamp } = getFrameData()\n    this.history.push({ ...info.point, timestamp })\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n    if (isMouseEvent(event) && event.buttons === 0) {\n      this.onPointerUp(event, info)\n      return\n    }\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    // notify pan session ended\n    const panInfo = getPanInfo(info, this.history)\n    const { onEnd, onSessionEnd } = this.handlers\n\n    onSessionEnd?.(event, panInfo)\n    this.end()\n\n    // if panning never started, no need to call `onEnd`\n    // panning requires a pointermove of at least 3px\n    if (!onEnd || !this.startEvent) return\n\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanSessionHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\nfunction subtractPoint(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction startPanPoint(history: PanSessionHistory) {\n  return history[0]\n}\n\nfunction lastPanPoint(history: PanSessionHistory) {\n  return history[history.length - 1]\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: PanSessionHistory) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1),\n  }\n}\n\nfunction lastDevicePoint(history: TimestampedPoint[]): TimestampedPoint {\n  return history[history.length - 1]\n}\n\nconst toMilliseconds = (seconds: number) => seconds * 1000\n\nfunction getVelocity(history: TimestampedPoint[], timeDelta: number): Point {\n  if (history.length < 2) {\n    return { x: 0, y: 0 }\n  }\n\n  let i = history.length - 1\n  let timestampedPoint: TimestampedPoint | null = null\n  const lastPoint = lastDevicePoint(history)\n  while (i >= 0) {\n    timestampedPoint = history[i]\n    if (\n      lastPoint.timestamp - timestampedPoint.timestamp >\n      toMilliseconds(timeDelta)\n    ) {\n      break\n    }\n    i--\n  }\n\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 }\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000\n  if (time === 0) {\n    return { x: 0, y: 0 }\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time,\n  }\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0\n  }\n\n  return currentVelocity\n}\n"],"file":"pan-event.js"}